<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Reverse on Boris&#39;s Blog</title>
        <link>http://localhost:1313/tags/reverse/</link>
        <description>Recent content in Reverse on Boris&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Thu, 27 Jun 2024 13:26:06 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/reverse/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>UPX脱壳初探(x64dbg)</title>
        <link>http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/</link>
        <pubDate>Thu, 27 Jun 2024 13:26:06 +0800</pubDate>
        
        <guid>http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/</guid>
        <description>&lt;img src="http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133422309.png" alt="Featured image of post UPX脱壳初探(x64dbg)" /&gt;&lt;h1 id=&#34;1-target-程序&#34;&gt;1. Target 程序
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://9unkk.github.io//Download/Basic/CRACKME.7z&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRACKME&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://9unkk.github.io//Download/unpacking/CRACKME%20UPX.7z&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRACKME UPX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解压密码：9unk&lt;/p&gt;
&lt;p&gt;目标：初步学习脱壳步骤，了解OEP（程序入口点）和 IAT（Import Address Table）&lt;/p&gt;
&lt;h1 id=&#34;2-壳&#34;&gt;2. 壳
&lt;/h1&gt;&lt;p&gt;PE （Poreable Executable）也就是EXE和DLL文件所具有的&lt;strong&gt;压缩、加密、保护&lt;/strong&gt;作用的东西，当然加壳也可以成为我们绕过杀软的一种方式（研究中）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 152; 
			flex-basis: 366px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504.png&#34; data-size=&#34;827x542&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504.png&#34;
			width=&#34;827&#34;
			height=&#34;542&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504_hu3f7f1bc4a7e657842d61bd0d47e3a3e3_256143_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504_hu3f7f1bc4a7e657842d61bd0d47e3a3e3_256143_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加壳的过程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将待加壳程序全部进行加密&lt;/li&gt;
&lt;li&gt;壳子程序中新增一段解密程序&lt;/li&gt;
&lt;li&gt;修改壳子程序的OEP到解密程序入口处&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-壳运行原理以upx为例&#34;&gt;3. 壳运行原理（以UPX为例）
&lt;/h1&gt;&lt;h3 id=&#34;首先对程序进行解密解压缩然后再执行程序&#34;&gt;首先对程序进行解密（解压缩）然后再执行程序
&lt;/h3&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 182; 
			flex-basis: 438px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444.png&#34; data-size=&#34;741x406&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444.png&#34;
			width=&#34;741&#34;
			height=&#34;406&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444_hu225cc780f870604456aa3ec5b321441f_51204_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444_hu225cc780f870604456aa3ec5b321441f_51204_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如上图所示，PE文件使用UPX工具进行加壳（压缩），将&amp;quot;节1&amp;quot;和&amp;quot;节2&amp;quot;压缩到&amp;quot;压缩数据中&amp;quot;,并且在&amp;quot;新PE&amp;quot;中增加一段解密（解压）程序，将程序恢复。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-upx加壳原理&#34;&gt;4. UPX加壳原理
&lt;/h1&gt;&lt;p&gt;UPX加壳是一种压缩与加密技术，它将可执行文件进行压缩、加密并重新包装，以达到保护程序的目的。加壳后的程序在运行时会自动解压、解密并执行原始程序。这种加壳方式可以有效防止程序被轻易反编译或修改，从而提高软件的安全性。&lt;/p&gt;
&lt;h2 id=&#34;41-upx加壳过程upx壳ultimate-packer-for-executables用于可执行文件压缩减小文件大小在运行时解压缩&#34;&gt;4.1 UPX加壳过程（UPX壳，Ultimate Packer for eXecutables，用于可执行文件压缩，减小文件大小，在运行时解压缩）
&lt;/h2&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 340; 
			flex-basis: 817px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999.png&#34; data-size=&#34;1522x447&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999.png&#34;
			width=&#34;1522&#34;
			height=&#34;447&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999_hu5cc40a5c2d9b5fbaae0d95c235fae0a7_338606_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999_hu5cc40a5c2d9b5fbaae0d95c235fae0a7_338606_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​	初始化：进程启动后，申请内存，内部包含空节&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先映射头部，当然也要对pe头进行操作&lt;/li&gt;
&lt;li&gt;数据映射，把解压缩代码和压缩数据映射进内存&lt;/li&gt;
&lt;li&gt;把各种表进行处理&lt;/li&gt;
&lt;li&gt;运行压缩代码，跑压缩数据&lt;/li&gt;
&lt;li&gt;还原数据，填充&lt;/li&gt;
&lt;li&gt;行完解压缩代码后，跑到节区1去执行原来的功能（会存在大跳）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 209; 
			flex-basis: 502px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682.png&#34; data-size=&#34;2417x1154&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682.png&#34;
			width=&#34;2417&#34;
			height=&#34;1154&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682_hud4c2e2216e3a29495a5a9be3ff44cfa5_336776_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682_hud4c2e2216e3a29495a5a9be3ff44cfa5_336776_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;42-常见upx魔改情况&#34;&gt;4.2 常见UPX魔改情况
&lt;/h2&gt;&lt;p&gt;区段名被修改UPX → 1PX 使用010 Editor修改回去 如图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 653; 
			flex-basis: 1567px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677.png&#34; data-size=&#34;712x109&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677.png&#34;
			width=&#34;712&#34;
			height=&#34;109&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677_hub0d74452893c8364a702c9184d496563_19068_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677_hub0d74452893c8364a702c9184d496563_19068_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将软件通过010 Editor打开，可以发现明确的UPX头部，此时使用Die可以轻松识别，当我们修改UPX头部信息为1PX时，此时程序任然可以正常运行，使用Die识别到UPX但是无法发现具体版本信息，此时使用UPX -d 进行脱壳是失败的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 183; 
			flex-basis: 439px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732.png&#34; data-size=&#34;826x451&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732.png&#34;
			width=&#34;826&#34;
			height=&#34;451&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732_hua951b1893cbf645b38413673ecadbb8a_64600_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732_hua951b1893cbf645b38413673ecadbb8a_64600_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 439; 
			flex-basis: 1054px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450.png&#34; data-size=&#34;1094x249&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450.png&#34;
			width=&#34;1094&#34;
			height=&#34;249&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450_hu8096131a6e2aad65f5dc86b0fd60fff0_24899_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450_hu8096131a6e2aad65f5dc86b0fd60fff0_24899_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-脱壳&#34;&gt;5. 脱壳
&lt;/h1&gt;&lt;h2 id=&#34;51-直接脱壳&#34;&gt;5.1 直接脱壳
&lt;/h2&gt;&lt;p&gt;如果能直接识别到UPX壳的话，直接使用UPX -d 进行脱壳如下&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 431; 
			flex-basis: 1036px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589.png&#34; data-size=&#34;1041x241&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589.png&#34;
			width=&#34;1041&#34;
			height=&#34;241&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589_hu9ea1b79d71e64a195c73b42e3ad769e7_23959_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589_hu9ea1b79d71e64a195c73b42e3ad769e7_23959_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;52-手动脱壳x64dbg&#34;&gt;5.2 手动脱壳(x64dbg)
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;脱壳基本步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;寻找 OEP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转储&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修复 IAT（修复导入表）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查目标程序是否存在 AntiDump 等组织程序被转储的保护措施，并尝试修复这些问题。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;寻找OEP：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单步跟踪法：主要使用 “F8” 和 “F4” 这两个快捷键，一步一步分析每一条汇编背后所代表的意思，将壳代码读懂，从而找到原始 OEP 然后脱壳。&lt;/li&gt;
&lt;li&gt;ESP定律法：一般加壳程序在运行时，会先执行壳代码，然后在内存中恢复还原原程序，再跳转到原始OEP，执行原程序的代码。这些壳代码首先会使用 PUSHAD 指令保存寄存器环境，在解密各个区段完毕，跳往 OEP 之前会使用 POPAD 指令恢复寄存器环境。&lt;/li&gt;
&lt;li&gt;内存镜像法：在加壳程序执行时，会先将源程序的 “CODE” 和 “DATA” 区段解压\解密并载入内存，然后再载入 “rsrc” 资源到内存中，最后跳到 OEP 执行解密后的程序。内存镜像法就是在 rsrs 先设置一个内存执行断点，当程序停下来的时候说明程序已经解压\解密完成。此时再到 “DATA” 区段设置内存执行断点，程序下一次会停在 OEP 入口点。&lt;/li&gt;
&lt;li&gt;一步到达OEP（😀.jpg）：使用快捷键 “Ctrl+B” 搜索十六进制字符串 “E9 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00”，即可找到跳转 OEP 的位置；使用快捷键 “Ctrl+F” 搜索 popad。找的 popad 需要满足，在程序返回时，壳程序希望恢复现场环境的地方。也就是靠近 jmp 和 return 的地方。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;521-esp定律&#34;&gt;5.2.1 ESP定律
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;F9，运行到pushad指令，F7执行到下一行汇编指令，此时寄存器的值存储到栈顶，也就是 esp 的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 193; 
			flex-basis: 464px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859.png&#34; data-size=&#34;2556x1322&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859.png&#34;
			width=&#34;2556&#34;
			height=&#34;1322&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859_hu266985f9e9b15a20aa94ac1d2a14ece9_358146_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859_hu266985f9e9b15a20aa94ac1d2a14ece9_358146_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;右击 esp 寄存器，选择在内存中跳转。此时才内存窗口可以看到当前存储的寄存器值，并如图设置硬件访问断点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 186; 
			flex-basis: 447px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281.png&#34; data-size=&#34;2558x1373&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281.png&#34;
			width=&#34;2558&#34;
			height=&#34;1373&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281_hu47b853f8bc3350d7afa1351ac31666c3_324959_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281_hu47b853f8bc3350d7afa1351ac31666c3_324959_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;“F9” 运行程序后，程序断在如下位置。下面有个 jmp 指令，跳转到 OEP 处。OEP地址为：0x00409CAD&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 186; 
			flex-basis: 447px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060.png&#34; data-size=&#34;2556x1371&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060.png&#34;
			width=&#34;2556&#34;
			height=&#34;1371&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060_hu4476acc8dc2a60b03e76b07376b379b3_329473_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060_hu4476acc8dc2a60b03e76b07376b379b3_329473_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;522-内存镜像法&#34;&gt;5.2.2 内存镜像法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;载入 UPX 程序，使用快捷键 “Alt+M” 进入到内存视图，对 “.rsrc” 区段设置内存访问断点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 444px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239.png&#34; data-size=&#34;2557x1380&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239.png&#34;
			width=&#34;2557&#34;
			height=&#34;1380&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239_huca414c873a58be7b13c9804910274477_250426_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239_huca414c873a58be7b13c9804910274477_250426_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;“F9” 运行upx程序到 “rsrc” 区段，此时前面两个区段已经解密好了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 446px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546.png&#34; data-size=&#34;2560x1377&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546.png&#34;
			width=&#34;2560&#34;
			height=&#34;1377&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546_hu1af3a6ab0269c3cdd4c7ae37cb6ac6cb_365551_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546_hu1af3a6ab0269c3cdd4c7ae37cb6ac6cb_365551_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;再次到内存视图，使用 “F2” 对 “CODE” 区段设置内存执行断点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 445px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624.png&#34; data-size=&#34;2560x1379&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624.png&#34;
			width=&#34;2560&#34;
			height=&#34;1379&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624_hua531582b61bdeb9d406e02f1a7aed92a_267722_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624_hua531582b61bdeb9d406e02f1a7aed92a_267722_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;继续 “F9” 执行代码，此时可以看到程序停在了 OEP 入口处（0x00409E23）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 445px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392.png&#34; data-size=&#34;2560x1378&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392.png&#34;
			width=&#34;2560&#34;
			height=&#34;1378&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392_hu4061852a7d157b416a593a2e81518701_350165_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392_hu4061852a7d157b416a593a2e81518701_350165_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-修复iat表&#34;&gt;6. 修复IAT表
&lt;/h1&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 86; 
			flex-basis: 206px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637.png&#34; data-size=&#34;678x787&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637.png&#34;
			width=&#34;678&#34;
			height=&#34;787&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637_hu43543990328f6ff4c16b33b5e04739bd_41055_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637_hu43543990328f6ff4c16b33b5e04739bd_41055_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置OEP地址-&amp;gt; IAT Autosearch -&amp;gt; Get Imports -&amp;gt; Dump -&amp;gt; Fix Dump&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 723; 
			flex-basis: 1737px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944.png&#34; data-size=&#34;883x122&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944.png&#34;
			width=&#34;883&#34;
			height=&#34;122&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944_hude6f7f2295fece6b16ee26b69e7cdbb5_10363_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944_hude6f7f2295fece6b16ee26b69e7cdbb5_10363_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 127; 
			flex-basis: 306px&#34;
	&gt;
	&lt;a href=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197.png&#34; data-size=&#34;1419x1111&#34;&gt;
		&lt;img src=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197.png&#34;
			width=&#34;1419&#34;
			height=&#34;1111&#34;
			srcset=&#34;http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197_hub00700a03cad3f5cb38d96d25359b9b1_134171_480x0_resize_box_3.png 480w, http://localhost:1313/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197_hub00700a03cad3f5cb38d96d25359b9b1_134171_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
